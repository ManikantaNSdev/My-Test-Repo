
# GitHub Actions workflow for deploying JavaScript files to NetSuite File Cabinet
name: Deploy to NetSuite with JWT

on:
  push:
    branches: [main]
    paths:
      - 'multiplier-netsuite-integration/src/FileCabinet/SuiteScripts/**.js'
      - '.github/workflows/deploy-to-netsuite.yml'
  pull_request:
    types: [closed]
    branches: [main]
    paths:
      - 'multiplier-netsuite-integration/src/FileCabinet/**'
  workflow_dispatch:  # Manual trigger option

jobs:
  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    environment: Netsuite Sandbox
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone for faster checkout
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # Updated to Node.js 18 LTS
      
      - name: Install dependencies
        run: |
          # Create minimal package.json with only required dependencies
          echo '{
            "name": "netsuite-deployment-automation",
            "version": "1.0.0",
            "dependencies": {
              "axios": "^1.9.0",
              "dotenv": "^16.5.0"
            }
          }' > package.json
          # Create package-lock.json for caching to work
          npm install --package-lock-only
          # Install dependencies with optimized flags
          npm ci --no-audit --prefer-offline
      
      - name: Create and run deployment script
        run: |
          cat > deploy.js << 'EOF'
          /**
           * Multiplier NetSuite Deployment System
           * High-performance script to sync JavaScript files from GitHub to NetSuite File Cabinet
           */
          require('dotenv').config();
          const fs = require('fs');
          const axios = require('axios');
          const path = require('path');
          const crypto = require('crypto');

          // Parse configuration from environment variable
          const config = JSON.parse(process.env.CONFIG);
          
          // Determine which environment to use based on the branch
          const branch = process.env.GITHUB_REF_NAME;
          const isMain = branch === 'main';
          // If branch is 'main', use PRODUCTION config, otherwise use SANDBOX
          const currentConfig = isMain ? config.PRODUCTION : config.SANDBOX;

          // Performance optimization: Create axios instance with default config
          const api = axios.create({
            headers: {
              'Content-Type': 'text/xml; charset=utf-8'
            },
            timeout: 30000 // 30 second timeout
          });

          // Configuration
          const ACCOUNT_ID = currentConfig.ACCOUNT_ID;
          const BASE_URL = `https://${ACCOUNT_ID}.suitetalk.api.netsuite.com`;
          const SOAP_URL = `${BASE_URL}/services/NetSuitePort_2024_1`;
          const SOURCE_ROOT = './multiplier-netsuite-integration/src/FileCabinet/SuiteScripts';
          
          // Folder mappings - using values from currentConfig with fallback defaults
          const FOLDER_IDS = {
            'SuiteScripts': currentConfig.NETSUITE_SUITESCRIPTS_FOLDER_ID || "-15",
            'SuiteScripts/RestletScripts': currentConfig.NETSUITE_RESTLET_SCRIPTS_FOLDER_ID || "2747420",
            'SuiteScripts/ClientScripts': currentConfig.NETSUITE_CLIENT_SCRIPTS_FOLDER_ID || "2747421",
            'SuiteScripts/UserEventScripts': currentConfig.NETSUITE_USER_EVENT_SCRIPTS_FOLDER_ID || "2747422",
            'SuiteScripts/SuiteletScripts': currentConfig.NETSUITE_SUITELET_SCRIPTS_FOLDER_ID || "2747423",
            'SuiteScripts/ScheduledScripts': currentConfig.NETSUITE_SCHEDULED_SCRIPTS_FOLDER_ID || "2747424",
            'SuiteScripts/MapReduceScripts': currentConfig.NETSUITE_MAPREDUCE_SCRIPTS_FOLDER_ID || "2747425",
            'SuiteScripts/WorkflowActionScripts': currentConfig.NETSUITE_WORKFLOW_SCRIPTS_FOLDER_ID || "2747426",
            'SuiteScripts/LibraryFiles': currentConfig.NETSUITE_LIBRARY_FILES_FOLDER_ID || "2747427",
            'SuiteScripts/MassUpdateScripts': currentConfig.NETSUITE_MASS_UPDATE_SCRIPTS_FOLDER_ID || "2747428",
          };

          // Path mapping between GitHub repository structure and NetSuite folder structure
          // Both keys and values must match the folder structure exactly (no spaces)
          const FOLDER_PATH_MAPPING = {
            'multiplier-netsuite-integration/src/FileCabinet/SuiteScripts': 'SuiteScripts',
            'multiplier-netsuite-integration/src/FileCabinet/SuiteScripts/RestletScripts': 'SuiteScripts/RestletScripts',
            'multiplier-netsuite-integration/src/FileCabinet/SuiteScripts/ClientScripts': 'SuiteScripts/ClientScripts',
            'multiplier-netsuite-integration/src/FileCabinet/SuiteScripts/UserEventScripts': 'SuiteScripts/UserEventScripts',
            'multiplier-netsuite-integration/src/FileCabinet/SuiteScripts/SuiteletScripts': 'SuiteScripts/SuiteletScripts',
            'multiplier-netsuite-integration/src/FileCabinet/SuiteScripts/ScheduledScripts': 'SuiteScripts/ScheduledScripts',
            'multiplier-netsuite-integration/src/FileCabinet/SuiteScripts/MapReduceScripts': 'SuiteScripts/MapReduceScripts',
            'multiplier-netsuite-integration/src/FileCabinet/SuiteScripts/WorkflowActionScripts': 'SuiteScripts/WorkflowActionScripts',
            'multiplier-netsuite-integration/src/FileCabinet/SuiteScripts/Library': 'SuiteScripts/LibraryFiles',
            'multiplier-netsuite-integration/src/FileCabinet/SuiteScripts/MassUpdateScripts': 'SuiteScripts/MassUpdateScripts',
          };

          // Performance optimization: Cache auth parameters
          const AUTH_CACHE = {
            timestamp: null,
            nonce: null,
            signature: null,
            header: null,
            expiresAt: 0
          };

          // Generate OAuth 1.0 signature for NetSuite authentication using currentConfig values
          function generateOAuth1Signature(timestamp, nonce) {
            // Fast string concatenation for better performance
            const baseString = `${currentConfig.ACCOUNT_ID}&${currentConfig.CONSUMER_KEY}&${currentConfig.TOKEN_ID}&${nonce}&${timestamp}`;
            const signingKey = `${currentConfig.CONSUMER_SECRET}&${currentConfig.TOKEN_SECRET}`;
            return crypto.createHmac('sha256', signingKey).update(baseString).digest('base64');
          }

          // Generate authentication header for SOAP requests with caching
          function getAuthHeader() {
            const now = Date.now();
            
            // Use cached auth if still valid (less than 5 minutes old)
            if (AUTH_CACHE.expiresAt > now) {
              return AUTH_CACHE.header;
            }
            
            // Generate new auth parameters
            const timestamp = Math.floor(now / 1000);
            const nonce = crypto.randomBytes(16).toString('hex');
            const signature = generateOAuth1Signature(timestamp, nonce);
            
            // Create auth header
            const header = `<mes:tokenPassport><core:account>${currentConfig.ACCOUNT_ID}</core:account><core:consumerKey>${currentConfig.CONSUMER_KEY}</core:consumerKey><core:token>${currentConfig.TOKEN_ID}</core:token><core:nonce>${nonce}</core:nonce><core:timestamp>${timestamp}</core:timestamp><core:signature algorithm="HMAC-SHA256">${signature}</core:signature></mes:tokenPassport>`;
            
            // Cache the auth parameters
            AUTH_CACHE.timestamp = timestamp;
            AUTH_CACHE.nonce = nonce;
            AUTH_CACHE.signature = signature;
            AUTH_CACHE.header = header;
            AUTH_CACHE.expiresAt = now + 4 * 60 * 1000; // Valid for 4 minutes
            
            return header;
          }

          // Generate SOAP envelope for searching files
          function generateSearchSOAP(fileName, folderId) {
            const authHeader = getAuthHeader();
            // Minified XML for better performance
            return `<?xml version="1.0" encoding="UTF-8"?><soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="urn:messages_2024_1.platform.webservices.netsuite.com" xmlns:core="urn:core_2024_1.platform.webservices.netsuite.com" xmlns:fil="urn:filecabinet_2024_1.documents.webservices.netsuite.com"><soap:Header>${authHeader}</soap:Header><soap:Body><mes:search><mes:searchRecord xsi:type="fil:FileSearch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><fil:basic><core:name operator="is"><core:searchValue>${fileName}</core:searchValue></core:name><core:folder operator="anyOf"><core:searchValue internalId="${folderId}"/></core:folder></fil:basic></mes:searchRecord></mes:search></soap:Body></soap:Envelope>`;
          }

          // Generate SOAP envelope for creating a new file
          function generateAddSOAP(fileName, base64Content, folderId) {
            const authHeader = getAuthHeader();
            // Minified XML for better performance
            return `<?xml version="1.0" encoding="UTF-8"?><soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="urn:messages_2024_1.platform.webservices.netsuite.com" xmlns:core="urn:core_2024_1.platform.webservices.netsuite.com" xmlns:fil="urn:filecabinet_2024_1.documents.webservices.netsuite.com"><soap:Header>${authHeader}</soap:Header><soap:Body><mes:add><mes:record xsi:type="fil:File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><fil:name>${fileName}</fil:name><fil:content>${base64Content}</fil:content><fil:fileType>_JAVASCRIPT</fil:fileType><fil:folder internalId="${folderId}"/></mes:record></mes:add></soap:Body></soap:Envelope>`;
          }

          // Generate SOAP envelope for updating an existing file
          function generateUpdateSOAP(fileId, fileName, base64Content) {
            const authHeader = getAuthHeader();
            // Minified XML for better performance
            return `<?xml version="1.0" encoding="UTF-8"?><soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:mes="urn:messages_2024_1.platform.webservices.netsuite.com" xmlns:core="urn:core_2024_1.platform.webservices.netsuite.com" xmlns:fil="urn:filecabinet_2024_1.documents.webservices.netsuite.com"><soap:Header>${authHeader}</soap:Header><soap:Body><mes:update><mes:record xsi:type="fil:File" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" internalId="${fileId}"><fil:name>${fileName}</fil:name><fil:content>${base64Content}</fil:content><fil:fileType>_JAVASCRIPT</fil:fileType></mes:record></mes:update></soap:Body></soap:Envelope>`;
          }

          // Performance optimization: Cache for file existence checks
          const FILE_EXISTENCE_CACHE = new Map();

          // Find all JavaScript files in directory recursively
          function findJavaScriptFiles(directory, fileList = [], relativePath = '') {
            if (!fs.existsSync(directory)) return fileList;
            
            // Performance: Use synchronous operations for simplicity and to avoid promise overhead
            const files = fs.readdirSync(directory);
            
            for (let i = 0; i < files.length; i++) {
              const file = files[i];
              const fullPath = path.join(directory, file);
              const relPath = path.join(relativePath, file);
              const stats = fs.statSync(fullPath);
              
              if (stats.isDirectory()) {
                findJavaScriptFiles(fullPath, fileList, relPath);
              } else if (file.endsWith('.js') && file !== 'deploy.js') {
                fileList.push({
                  fullPath,
                  relativePath,
                  fileName: file,
                  size: stats.size // Track file size for logging
                });
              }
            }
            
            return fileList;
          }

          // Search for existing file in NetSuite with caching
          async function findExistingFile(fileName, folderId) {
            // Check cache first
            const cacheKey = `${fileName}:${folderId}`;
            if (FILE_EXISTENCE_CACHE.has(cacheKey)) {
              return FILE_EXISTENCE_CACHE.get(cacheKey);
            }
            
            try {
              const searchSOAP = generateSearchSOAP(fileName, folderId);
              const response = await api.post(SOAP_URL, searchSOAP, {
                headers: { 'SOAPAction': 'search' }
              });

              const fileIdMatch = response.data.match(/internalId="(\d+)"/);
              const fileId = fileIdMatch ? fileIdMatch[1] : null;
              
              // Cache the result
              FILE_EXISTENCE_CACHE.set(cacheKey, fileId);
              return fileId;
            } catch (err) {
              // Cache negative result too
              FILE_EXISTENCE_CACHE.set(cacheKey, null);
              return null;
            }
          }

          // Upload a single file to NetSuite
          async function uploadSingleFile(fileInfo, folderId) {
            const { fullPath, fileName, size } = fileInfo;
            
            try {
              // Performance: Use Buffer directly for better memory efficiency
              const fileContent = fs.readFileSync(fullPath, 'utf8');
              const base64Content = Buffer.from(fileContent).toString('base64');
              const existingFileId = await findExistingFile(fileName, folderId);
              
              let soapEnvelope, action, operation;
              if (existingFileId) {
                soapEnvelope = generateUpdateSOAP(existingFileId, fileName, base64Content);
                action = 'update';
                operation = 'Updated';
              } else {
                soapEnvelope = generateAddSOAP(fileName, base64Content, folderId);
                action = 'add';
                operation = 'Created';
              }

              const response = await api.post(SOAP_URL, soapEnvelope, {
                headers: { 'SOAPAction': action }
              });

              // Optimized regex pattern for better performance
              const fileIdMatch = response.data.match(/internalId="(\d+)"|<platformCore:internalId>(\d+)<\/platformCore:internalId>/);
              const fileId = fileIdMatch ? (fileIdMatch[1] || fileIdMatch[2]) : null;

              if (fileId) {
                return {
                  success: true,
                  fileId,
                  fileName,
                  operation,
                  filePath: fullPath,
                  size
                };
              }
              
              return { 
                success: false, 
                error: 'Could not parse file ID from response',
                fileName,
                filePath: fullPath
              };
            } catch (err) {
              return { 
                success: false, 
                error: err.response?.data || err.message,
                fileName,
                filePath: fullPath
              };
            }
          }

          // Map GitHub folder path to NetSuite folder path - optimized with direct object lookup
          function mapToNetSuiteFolderPath(githubFolderPath) {
            // Direct object lookup is faster than conditional logic
            return FOLDER_PATH_MAPPING[githubFolderPath] || 'SuiteScripts';
          }

          // Get NetSuite folder ID for a path - optimized with direct object lookup
          function getFolderIdForPath(netSuiteFolderPath) {
            // Direct object lookup is faster than conditional logic
            return FOLDER_IDS[netSuiteFolderPath] || FOLDER_IDS['SuiteScripts'];
          }

          // Upload all JavaScript files to NetSuite
          async function uploadAllFiles(sourceRoot = SOURCE_ROOT) {
            console.time('Total deployment time'); // Performance tracking
            
            if (!fs.existsSync(sourceRoot)) {
              console.error(`Root directory not found: ${sourceRoot}`);
              return [];
            }
            
            console.time('File discovery'); // Performance tracking
            const jsFiles = findJavaScriptFiles(sourceRoot);
            console.timeEnd('File discovery');
            
            if (jsFiles.length === 0) {
              console.log(`No JavaScript files found in ${sourceRoot}`);
              return [];
            }

            // Calculate total size for logging
            const totalSize = jsFiles.reduce((sum, file) => sum + file.size, 0);
            console.log(`Found ${jsFiles.length} JavaScript files to process (${(totalSize/1024).toFixed(2)} KB total)`);

            // Group files by folder for efficient processing
            console.time('File grouping'); // Performance tracking
            const filesByFolder = {};
            jsFiles.forEach(file => {
              const githubFolderPath = path.join(sourceRoot, file.relativePath);
              const netSuiteFolderPath = mapToNetSuiteFolderPath(githubFolderPath);
              
              if (!filesByFolder[netSuiteFolderPath]) {
                filesByFolder[netSuiteFolderPath] = [];
              }
              filesByFolder[netSuiteFolderPath].push(file);
            });
            console.timeEnd('File grouping');

            let successCount = 0, failureCount = 0;
            const results = [];

            // Performance optimization: Sort folders by number of files (process largest folders first)
            const folderPaths = Object.keys(filesByFolder).sort((a, b) => 
              filesByFolder[b].length - filesByFolder[a].length
            );

            // Process files folder by folder
            for (const netSuiteFolderPath of folderPaths) {
              const files = filesByFolder[netSuiteFolderPath];
              const folderId = getFolderIdForPath(netSuiteFolderPath);
              
              console.log(`\nProcessing ${files.length} files for NetSuite folder: ${netSuiteFolderPath} (ID: ${folderId})`);
              console.time(`Folder: ${netSuiteFolderPath}`); // Performance tracking
              
              // Performance optimization: Increase concurrency for faster uploads
              // but avoid overwhelming the NetSuite API
              const concurrencyLimit = 5; // Process 5 files at a time
              
              for (let i = 0; i < files.length; i += concurrencyLimit) {
                const batch = files.slice(i, i + concurrencyLimit);
                const batchPromises = batch.map(fileInfo => uploadSingleFile(fileInfo, folderId));
                
                const batchResults = await Promise.all(batchPromises);
                
                batchResults.forEach(result => {
                  results.push(result);
                  if (result.success) {
                    console.log(`✅ ${result.operation}: ${result.fileName} (ID: ${result.fileId})`);
                    successCount++;
                  } else {
                    console.log(`❌ Failed: ${result.fileName} - ${result.error}`);
                    failureCount++;
                  }
                });
                
                // Adaptive rate limiting: only wait if we have more files to process
                if (i + concurrencyLimit < files.length) {
                  // Performance optimization: shorter delay between batches
                  await new Promise(resolve => setTimeout(resolve, 500));
                }
              }
              
              console.timeEnd(`Folder: ${netSuiteFolderPath}`);
            }

            console.timeEnd('Total deployment time');
            console.log(`\nDeployment Summary: ${successCount} successful, ${failureCount} failed`);
            return results;
          }

          // Main function
          async function main() {
            try {
              console.log('Starting NetSuite deployment...');
              await uploadAllFiles();
            } catch (error) {
              console.error('Deployment failed:', error);
              process.exit(1);
            }
          }

          main();
          EOF
          node --max-old-space-size=4096 deploy.js
        env:
          CONFIG: >-
            {"PRODUCTION":{"ACCOUNT_ID":"7260051","CONSUMER_KEY":"cc73e2f5667cc60b20b3f603ec64f650a5a4776594394162aac9da1a22f2ba6f","CONSUMER_SECRET":"5c896bfc209f30d1d075cbde248a30e786a8fae6f191bbe59db01d2cb6fb02a8","TOKEN_ID":"c9f5faaf9e8f935879d026f2dac9ad0d5501e887a7d6f9a82ce2a2b48e4950e8","TOKEN_SECRET":"147f40faad27e7eced2c17dceef0b2e43bfdae4cca8ac2ac4a4039e9e7c83eee","JWT_KEY_ID":"-BjJw_gR-bj3DPRG11yARc365uzSS-7aTcRaN2jlS9I","NETSUITE_SUITESCRIPTS_FOLDER_ID":"-15","NETSUITE_RESTLET_SCRIPTS_FOLDER_ID":"2747420","NETSUITE_CLIENT_SCRIPTS_FOLDER_ID":"2747421","NETSUITE_USER_EVENT_SCRIPTS_FOLDER_ID":"2747422","NETSUITE_SUITELET_SCRIPTS_FOLDER_ID":"2747423","NETSUITE_SCHEDULED_SCRIPTS_FOLDER_ID":"2747424","NETSUITE_MAPREDUCE_SCRIPTS_FOLDER_ID":"2747425","NETSUITE_WORKFLOW_SCRIPTS_FOLDER_ID":"2747426","NETSUITE_LIBRARY_FILES_FOLDER_ID":"2747427","NETSUITE_MASS_UPDATE_SCRIPTS_FOLDER_ID":"2747428"},"SANDBOX":{"ACCOUNT_ID":"7260051_SB1","CONSUMER_KEY":"cc73e2f5667cc60b20b3f603ec64f650a5a4776594394162aac9da1a22f2ba6f","CONSUMER_SECRET":"5c896bfc209f30d1d075cbde248a30e786a8fae6f191bbe59db01d2cb6fb02a8","TOKEN_ID":"c9f5faaf9e8f935879d026f2dac9ad0d5501e887a7d6f9a82ce2a2b48e4950e8","TOKEN_SECRET":"147f40faad27e7eced2c17dceef0b2e43bfdae4cca8ac2ac4a4039e9e7c83eee","JWT_KEY_ID":"-BjJw_gR-bj3DPRG11yARc365uzSS-7aTcRaN2jlS9I","NETSUITE_SUITESCRIPTS_FOLDER_ID":"-15","NETSUITE_RESTLET_SCRIPTS_FOLDER_ID":"2747420","NETSUITE_CLIENT_SCRIPTS_FOLDER_ID":"2747421","NETSUITE_USER_EVENT_SCRIPTS_FOLDER_ID":"2747422","NETSUITE_SUITELET_SCRIPTS_FOLDER_ID":"2747423","NETSUITE_SCHEDULED_SCRIPTS_FOLDER_ID":"2747424","NETSUITE_MAPREDUCE_SCRIPTS_FOLDER_ID":"2747425","NETSUITE_WORKFLOW_SCRIPTS_FOLDER_ID":"2747426","NETSUITE_LIBRARY_FILES_FOLDER_ID":"2747427","NETSUITE_MASS_UPDATE_SCRIPTS_FOLDER_ID":"2747428"}}}
